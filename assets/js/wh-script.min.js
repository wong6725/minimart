jQuery( function( $ ) 
{
	var wcwh = ajax_wh;
	var formCache = [];

	//blockUI
	function blocking( $elem )
	{
		$elem.block(
		{
			message: null,
			overlayCSS: {
				background: '#fff',
				opacity: 0.6
			}
		});
	}
	function unblocking( $elem )
	{
		$elem.unblock();
	}

	tooltip();
	function tooltip()
	{
		$( '[data-toggle="tooltip"]' ).tooltip();
	}

	//readonly handler
	readonly();
	function readonly()
	{
		if( $( '.readonly' ).length > 0 )
		{
			$( 'form input.readonly' ).attr( 'readonly', 'readonly' );
			$( 'form textarea.readonly' ).attr( 'readonly', 'readonly' );
			$( 'form select.readonly' ).attr( 'disabled', 'disabled' );
		}
	}
	//number only input
	numonly();
	function numonly()
	{
		if( $( ".numonly" ).length > 0 )
		{
			$( "input.numonly" ).numeric();
			$( "textarea.numonly" ).numeric();
			$( "input.numonly.integer" ).numeric( false );
			$( "textarea.numonly.integer" ).numeric( false );
			$( "input.numonly.positive" ).numeric( {negative: false} );
			$( "textarea.numonly.positive" ).numeric( {negative: false} );
		}
	}

	//Dynamic element generated
	$( document ).bind( 'onDynamicElement', function()
	{
		readonly();
		numonly();
		tooltip();
	} );

	//focus & select field
	$( document ).on( 'focus', 'input.onfocusFocus', function()
	{
		$( this ).select();
	} );

	//Search filter on table tr
	$( document ).on( "keyup", "input.searchFiltering", function() 
	{
		var value = $(this).val().toLowerCase();
		$( this ).closest( '.wcwh-section' ).find( ".filterable #the-list tr" ).filter( function() 
		{
			$( this ).toggle( $( this ).text().toLowerCase().indexOf( value ) > -1 )
		});
	});
	
	//Modal
	function get_form_hook( $form )
	{
		return ( $form.data( 'hook' ) && typeof( $form.data( 'hook' ) ) !== 'undefined' )? $form.data( 'hook' ) : 'general';
	}
	$( document ).on( 'click', '.toggle-modal', function()
	{
		var tpl = $( this ).data( 'tpl' );
		var actions = $( this ).data( 'actions' );
		var id = ( typeof( $( this ).data( 'id' ) ) !== 'undefined' )? $( this ).data( 'id' ) : 0;
		var action = ( typeof( $( this ).data( 'action' ) ) !== 'undefined' )? $( this ).data( 'action' ) : "";
		var service = ( typeof( $( this ).data( 'service' ) ) !== 'undefined' )? $( this ).data( 'service' ) : "";
		var title = ( typeof( $( this ).data( 'title' ) ) !== 'undefined' )? $( this ).data( 'title' ) : "";
		var message = ( typeof( $( this ).data( 'message' ) ) !== 'undefined' )? $( this ).data( 'message' ) : "";

		var $modal = $( '#' + $( this ).data( 'modal' ) );
		$modal.find( '.modal-title' ).html( title );
		$modal.find( '.confirm-message' ).html( message );

		var content = $( '#' + tpl + 'TPL' ).html();
		if( typeof( content ) !== 'undefined' )
		{
			content = content.replace( "{id}", id );
			content = content.replace( "{service}", service );
			content = content.replace( "{action}", action );

			$modal.find( '.modal-body' ).html( content );
		}

		if( $modal.hasClass( 'modalForm' ) && $modal.find( '.modal-body form' ).length && $modal.find( '.modal-body form' ).hasClass( 'new' ) )
	 	{
	 		var actionHook = get_form_hook( $modal.find( '.modal-body form' ) );
	 		if( typeof( formCache ) !== 'undefined' && typeof( formCache[actionHook] ) !== 'undefined' && formCache[actionHook] )
			{
				$modal.find( '.modal-body' ).html( formCache[actionHook] );
			}
	 	}

		var action = [];
		if( $modal.hasClass( 'modalForm' ) ) action = [ 'close', 'submit' ];
		if( $modal.hasClass( 'modalConfirm' ) ) action = [ 'no', 'yes' ];
		if( $modal.hasClass( 'modalView' ) ) action = [ 'close' ];

		if( actions && typeof( actions ) !== 'undefined' )
			action = actions.split( '|' );
		
		$.each( action, function ( key, value )
		{
			var btn = $modal.find( '.footer-action-'+value ).html();
			$modal.find( '.modal-footer' ).append( btn );
		} );

		//open modal
		$modal.modal( { show:true } );

		$( document ).trigger( 'onModalFormLoaded' );
		$( document ).trigger( 'onDynamicElement' );

		return false;
	} );
	$( document ).on( 'hidden.bs.modal', '.modal', function( e ) 
	{
	 	var $modal = $( this );

	 	if( $modal.hasClass( 'modalForm' ) && $modal.find( '.modal-body form' ).length && $modal.find( '.modal-body form' ).hasClass( 'new' ) )
	 	{
	 		if( ! $modal.find( '.modal-body form' ).hasClass( 'done' ) )
	 		{
	 			var actionHook = get_form_hook( $modal.find( '.modal-body form' ) );
	 			formCache[actionHook] = $modal.find( '.modal-body form' ).clone();
	 		}
	 		else
	 		{
	 			formCache[actionHook] = null;
				delete formCache[actionHook];
	 		}
	 	}

	 	$modal.find( '.modal-body' ).html( '' );
		$modal.find( '.modal-title' ).html( '' );
		$modal.find( '.modal-footer' ).html( '' );
	} );
	var modalConfirm = function( callback, $elem, params )
	{
		var $modal = $( '#' + params.modal );
		$modal.find( '.modal-title' ).html( params.title );
		$modal.find( '.confirm-message' ).html( params.message );

		var content = $( '#' + params.tpl + 'TPL' ).html();
		if( typeof( content ) !== 'undefined' )
		{
			content = content.replace( "{id}", params.id );
			content = content.replace( "{service}", params.service );
			content = content.replace( "{action}", params.action );

			$modal.find( '.modal-body' ).html( content );
		}

		$.each( params.actionBtn, function ( key, value )
		{
			var btn = $modal.find( '.footer-action-'+value ).html();
			$modal.find( '.modal-footer' ).append( btn );
		} );
		
	    $modal.modal( { show:true } );

		$modal.find( "button.action-yes" ).on( "click", function()
		{
	    	callback( true );
	  	});
	  
	  	$modal.find( "button.action-no" ).on( "click", function()
	  	{
	    	callback(false);
	  	});
	};
	$( document ).on( 'click', '.modal button.action-submit', function()
	{
		$( this ).closest( '.modal' ).find( 'form' ).submit();
	} );
	$( document ).bind( 'onModalFormLoaded', function()
	{
		$( 'form.needValidate' ).validate(
		{
			//focusCleanup: true,
			//showErrors: function( errorMap, errorList ) {},
		 	submitHandler: function( element ) 
		 	{
		    	general_form_handler( element );
		  	},
		  	invalidHandler: function( event, validator ) 
		  	{},
			highlight: function( element, errorClass ) 
			{
			    $( element ).closest( '.form-group' ).addClass( 'has-error' );
			},
			unhighlight: function( element, errorClass, validClass ) 
			{
		    	$( element ).closest( '.form-group' ).removeClass( 'has-error' );
		  	},
		  	errorPlacement: function( error, element ) 
		  	{
            	//Empty to NOT show error
      		},
		});
	} );

	//Listing
	$( document ).on( 'submit', '.wcwh-listing-form', function()
	{
		return false;	//prevent default form submission
	} );
	$( document ).on( 'click', '#search-submit', function()
	{
		general_listing_handler( $( this ), $( this ).closest( '.wcwh-listing-form' ), $( '.tablenav .statuses a.active:first' ).data( 'status' ) );

		return false;
	} );
	$( document ).on( 'click', '.tablenav .statuses a', function()
	{
		if( ! $( this ).hasClass( 'active' ) )
			general_listing_handler( $( this ), $( this ).closest( '.wcwh-listing-form' ), $( this ).data( 'status' ) );

		return false;
	} );

	//Link Action
	$( document ).on( 'click', '.linkAction', function()
	{
		var $elem = $( this ); //action btn

		var id = ( typeof( $elem.data( 'id' ) ) !== 'undefined' )? $elem.data( 'id' ) : 0;
		var service = ( typeof( $elem.data( 'service' ) ) !== 'undefined' )? $elem.data( 'service' ) : "";
		var action = ( typeof( $elem.data( 'action' ) ) !== 'undefined' )? $elem.data( 'action' ) : "";

		var modal 	= ( typeof( $elem.data( 'modal' ) ) !== 'undefined' )? $elem.data( 'modal' ) : "";
		var tpl 	= ( typeof( $elem.data( 'tpl' ) ) !== 'undefined' )? $elem.data( 'tpl' ) : "";
		var actions = ( typeof( $elem.data( 'actions' ) ) !== 'undefined' )? $elem.data( 'actions' ) : "";
		var title 	= ( typeof( $( this ).data( 'title' ) ) !== 'undefined' )? $( this ).data( 'title' ) : "";
		var message = ( typeof( $( this ).data( 'message' ) ) !== 'undefined' )? $( this ).data( 'message' ) : "";
		var form 	= ( typeof( $( this ).data( 'form' ) ) !== 'undefined' )? $( this ).data( 'form' ) : "";

		var actionBtn = [ 'no', 'yes' ];
		if( actions.length ) actionBtn = actions.split( '|' );
		var param = { 
			id: id, service: service, action: action, 
			modal: modal, tpl: tpl, actionBtn: actionBtn, title: title, message: message, 
			form: form, confirmForm : ''
		};

		if( service.length )
		{	
			if( modal.length && $( '#' + modal ).hasClass( 'modalConfirm' ) )
			{
				modalConfirm( function( confirm )
					{
						if( confirm )
						{
							param.confirmed = true;
							if( $( '#' + modal ).find( 'form' ).length )
								param.confirmForm = $( '#' + modal ).find( 'form' ).attr( 'id' );
							general_link_handler( $elem, param );
						}
					},
					$elem,
					param
				);
			}
			else
				general_link_handler( $elem, param );
		}

		return false;
	} );
	

	/**
	 *	Ajax Submission
	 *	---------------------------------------------------------------------------------------------------
	 */
	var ajaxSession = [];

	function general_link_handler( $elem, params )
	{
		if( typeof( $elem ) === 'undefined' || typeof( params ) === 'undefined' ) return false;

		var actionHook = ( params.service )? params.service : 'default';
		var $form = $elem.closest( ".wcwh-listing-form" );

		var formData = { id: params.id, action: params.action };
		var fields = ( params.form.length )? $( "#" + params.form ).serializeArray() : [];
		formData.listing_form = $.param( fields );

		var remarks = ( params.confirmForm.length )? $( "#" + params.confirmForm ).serializeArray() : [];
		formData.info = $.param( remarks );

		var param = {
			'action' 	: wcwh.appid+'_'+actionHook,
			'form'		: formData,
			'token'		: $form.data('token'),
		};

		var $block = $form.closest( '.wcwh-section' );
		blocking( $block );
		
		var $blockModal;
		if( params.modal.length )
			$blockModal = $( '#' + params.modal ).find( '.modal-content' );
		if( params.confirmed && $( '#' + params.modal ).is( ':visible' ) )
			blocking( $blockModal );

		$.ajax({
			type:    'POST',
			url:     wcwh.ajax_url,
			data:    param,
			beforeSend: function()
			{
			},
			success: function( outcomes ) 
			{
				unblocking( $block );

				if ( outcomes ) {
					var outcome = $.parseJSON( outcomes );
					
					if( outcome.succ ) 
					{
						if( params.confirmed && $( '#' + params.modal ).is( ':visible' ) )
						{
							$( '#' + params.modal ).modal( 'hide' );
							unblocking( $blockModal );
						}
					}
					
					if( outcome.messages )
					{
						$( '.notice-after' ).after( outcome.messages );
					}

					if( outcome.content )
					{
						$.each( outcome.content, function ( key, value )
						{
							$( key ).html( value );
						} );
					}

					if( outcome.segments )
					{
						$.each( outcome.segments, function ( key, value )
						{
							$( key ).replaceWith( value );
						} );
					}

					var $modal;
					if( params.modal.length && ! params.confirmed )
					{	
						$modal = $( '#' + params.modal );
						$modal.find( '.modal-title' ).html( params.title );
						$modal.find( '.confirm-message' ).html( params.message );

						$.each( params.actionBtn, function ( key, value )
						{
							var btn = $modal.find( '.footer-action-'+value ).html();
							$modal.find( '.modal-footer' ).append( btn );
						} );

						//open modal
						$modal.modal( { show:true } );

						$( document ).trigger( 'onModalFormLoaded' );
						$( document ).trigger( 'onDynamicElement' );
					}
				}
			},
			error: function( e, code, msg )
			{
				unblocking( $block );

				if( wcwh.debug ) console.log( code + ': ' + msg );
			},
			complete: function( e, stat )
			{
				$( document ).trigger( 'onAjax_'+actionHook+stat );

				unblocking( $block );

				if( wcwh.debug )
				{
					console.log( stat ); console.log( param );
				} 
			}
		});
	}

	function general_listing_handler( $elem, $form, status = 'all' )
	{
		var actionHook = get_form_hook( $form );

		var formData = $form.serializeArray();
		formData.push( { name: "filter[status]", value: ( ( status !== '' )? status : $( '.tablenav .statuses a.active:first' ).data( 'status' ) ) } );

		var param = {
			'action' 	: wcwh.appid+'_'+actionHook,
			'form' 		: $.param( formData ),
			'token'		: $form.data('token'),
		};

		var $block = $form.closest( '.wcwh-section' );
		blocking( $block );

		$.ajax({
			type:    'POST',
			url:     wcwh.ajax_url,
			data:    param,
			beforeSend: function()
			{
				if( typeof( ajaxSession ) !== 'undefined' && typeof( ajaxSession[actionHook] ) !== 'undefined' && ajaxSession[actionHook] )
					return false;

				ajaxSession[actionHook] = true;
			},
			success: function( outcomes ) 
			{
				unblocking( $block );
				ajaxSession[actionHook] = false;
				delete ajaxSession[actionHook];

				if ( outcomes ) {
					var outcome = $.parseJSON( outcomes );
					
					if( outcome.succ ) 
					{
					}
					
					if( outcome.messages )
					{
						$( '.notice-after' ).after( outcome.messages );
					}

					if( outcome.segments )
					{
						$.each( outcome.segments, function ( key, value )
						{
							$( key ).replaceWith( value );
						} );
					}
				}
			},
			error: function( e, code, msg )
			{
				unblocking( $block );
				ajaxSession[actionHook] = false;
				delete ajaxSession[actionHook];

				if( wcwh.debug ) console.log( code + ': ' + msg );
			},
			complete: function( e, stat )
			{
				$( document ).trigger( 'onAjax_'+actionHook+stat );

				unblocking( $block );
				ajaxSession[actionHook] = false;
				delete ajaxSession[actionHook];

				if( wcwh.debug )
				{
					console.log( stat ); console.log( param );
				} 
			}
		});
	}
	
	function general_form_handler( element )
	{
		var $form = $( element ); //form
		var actionHook = get_form_hook( $form );

		if( $form.hasClass( 'needValidate' ) )
		{
			$form.validate();
			if( ! $form.valid() ) return false;
		}

		var formData = $form.serializeArray();

		var param = {
			'action': wcwh.appid+'_'+actionHook,
			'form' : $.param( formData ),
			'token' : $form.data('token')
		};

		var $block = $form.parents( '.modal-content' );
		if( ! $block ) $block = $( '.wcwh-section' );
		blocking( $block );
		
		$.ajax({
			type:    'POST',
			url:     wcwh.ajax_url,
			data:    param,
			beforeSend: function()
			{
				if( typeof( ajaxSession ) !== 'undefined' && typeof( ajaxSession[actionHook] ) !== 'undefined' && ajaxSession[actionHook] )
					return false;

				ajaxSession[actionHook] = true;
			},
			success: function( outcomes ) 
			{
				unblocking( $block );
				ajaxSession[actionHook] = false;
				delete ajaxSession[actionHook];

				if ( outcomes ) {
					var outcome = $.parseJSON( outcomes );
					
					if( outcome.succ ) 
					{
						$form.addClass( 'done' );
						$form.closest( '.modal' ).modal( 'hide' );

						formCache[actionHook] = null;
						delete formCache[actionHook];
					}
					
					if( outcome.messages )
					{
						$( '.notice-after' ).after( outcome.messages );
					}

					if( outcome.segments )
					{
						$.each( outcome.segments, function ( key, value )
						{
							$( key ).replaceWith( value );
						} );
					}
				}
			},
			error: function( e, code, msg )
			{
				unblocking( $block );
				ajaxSession[actionHook] = false;
				delete ajaxSession[actionHook];

				if( wcwh.debug ) console.log( code + ': ' + msg );
			},
			complete: function( e, stat )
			{
				$( document ).trigger( 'onAjax_'+actionHook+stat );

				unblocking( $block );
				ajaxSession[actionHook] = false;
				delete ajaxSession[actionHook];

				if( wcwh.debug )
				{
					console.log( stat ); console.log( param );
				} 
			}
		});
		
		return false;
	}
});